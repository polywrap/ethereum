#import { Module, Connection, Network, EventNotification, StaticTxResult, TxOverrides, TxRequest, TxReceipt, TxResponse } into Ethereum from "wrap://ens/ethereum.polywrap.eth"

type Module {
    callContractView(
        address: String!
        method: String!
        args: [String!]
        connection: Ethereum_Connection
    ): String!

    callContractStatic(
        address: String!
        method: String!
        args: [String!]
        connection: Ethereum_Connection
        txOverrides: Ethereum_TxOverrides
    ): Ethereum_StaticTxResult!

    getBalance(
        address: String!
        blockTag: BigInt
        connection: Ethereum_Connection
    ): BigInt!

    encodeParams(
        types: [String!]!
        values: [String!]!
    ): String!

    encodeFunction(
        method: String!
        args: [String!]
    ): String!

    solidityPack(
        types: [String!]!
        values: [String!]!
    ): String!

    solidityKeccak256(
        types: [String!]!
        values: [String!]!
    ): String!

    soliditySha256(
        types: [String!]!
        values: [String!]!
    ): String!

    getSignerAddress(
        connection: Ethereum_Connection
    ): String!

    getSignerBalance(
        blockTag: BigInt
        connection: Ethereum_Connection
    ): BigInt!

    getSignerTransactionCount(
        blockTag: BigInt
        connection: Ethereum_Connection
    ): BigInt!

    getGasPrice(
        connection: Ethereum_Connection
    ): BigInt!

    estimateTransactionGas(
        tx: Ethereum_TxRequest!
        connection: Ethereum_Connection
    ): BigInt!

    estimateContractCallGas(
        address: String!
        method: String!
        args: [String!]
        connection: Ethereum_Connection
        txOverrides: Ethereum_TxOverrides
    ): BigInt!

    checkAddress(
        address: String!
    ): Boolean!

    toWei(
        eth: String!
    ): BigInt!

    toEth(
        wei: BigInt!
    ): String!

    awaitTransaction(
        txHash: String!
        confirmations: UInt32!
        timeout: UInt32!
        connection: Ethereum_Connection
    ): Ethereum_TxReceipt!

    waitForEvent(
        address: String!
        event: String!
        args: [String!]
        timeout: UInt32
        connection: Ethereum_Connection
    ): Ethereum_EventNotification!

    getNetwork(
        connection: Ethereum_Connection
    ): Ethereum_Network!

    requestAccounts(
        connection: Ethereum_Connection
    ): [String!]!

    callContractMethod(
        address: String!
        method: String!
        args: [String!]
        connection: Ethereum_Connection
        txOverrides: Ethereum_TxOverrides
    ): Ethereum_TxResponse!

    callContractMethodAndWait(
        address: String!
        method: String!
        args: [String!]
        connection: Ethereum_Connection
        txOverrides: Ethereum_TxOverrides
    ): Ethereum_TxReceipt!

    sendTransaction(
        tx: Ethereum_TxRequest!
        connection: Ethereum_Connection
    ): Ethereum_TxResponse!

    sendTransactionAndWait(
        tx: Ethereum_TxRequest!
        connection: Ethereum_Connection
    ): Ethereum_TxReceipt!

    deployContract(
        abi: String!
        bytecode: String!
        args: [String!]
        connection: Ethereum_Connection
    ): String!

    signMessage(
        message: String!
        connection: Ethereum_Connection
    ): String!

    signMessageBytes(
        bytes: Bytes!
        connection: Ethereum_Connection
    ): String!

    sendRPC(
        method: String!
        params: [String!]!
        connection: Ethereum_Connection
    ): String
}
